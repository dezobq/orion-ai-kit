name: AI Pipeline
on: [pull_request, workflow_dispatch]
jobs:
  ai:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build AI image
        run: docker compose build

      - name: Detect stacks
        run: docker compose run --rm ai python ai_cli.py detect

      - name: Run tests
        run: docker compose run --rm ai python ai_cli.py run --task test

      - name: Run lint
        run: docker compose run --rm ai python ai_cli.py run --task lint

      - name: Run coverage
        run: docker compose run --rm ai python ai_cli.py run --task coverage

      - name: Run mutation testing
        run: docker compose run --rm ai python ai_cli.py run --task mutation || true

      - name: Quality gates (coverage & mutation)
        if: always()
        run: |
          docker compose run --rm --entrypoint "" ai bash -lc \
            "python3 scripts/check_thresholds.py --min-coverage 0.80 --min-mutation 0.60"

      - name: Generate summary
        if: always()
        run: |
          docker compose run --rm ai python scripts/generate_summary.py >> $GITHUB_STEP_SUMMARY || true

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            reports/**/*
            junit.xml
            .coverage
          retention-days: 30

      - name: Upload to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: reports/cobertura-coverage.xml,reports/coverage.xml,reports/lcov.info
          flags: unittests
          name: codecov-orion-ai-kit
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Setup Java for SonarCloud
        if: always()
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: SonarCloud Scan
        if: always()
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PR comment (sticky)
        if: always() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ai-pipeline
          path: reports/summary.md

      - name: Slack notification (on failure)
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": ":rotating_light: AI Pipeline failed in *${{ github.repository }}*",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rotating_light: *AI Pipeline Failed*\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* <${{ github.event.head_commit.url }}|${{ github.sha }}>\n*Triggered by:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Artifacts"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: List all reports
        if: always()
        run: docker compose run --rm ai python ai_cli.py reports
